{"intl":"","src":"/** @module polyfill.classList */require( 'polyfill.classList', function(exports, module) {  /*\n * classList.js: Cross-browser full element.classList implementation.\n * 1.1.20150312\n *\n * By Eli Grey, http://eligrey.com\n * License: Dedicated to the public domain.\n *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md\n */\n\n/*global self, document, DOMException */\n\n/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */\n\nif (\"document\" in self) {\n\n    // Full polyfill for browsers with no classList support\n    // Including IE < Edge missing SVGElement.classList\n    if (!(\"classList\" in document.createElement(\"_\"))\n        || document.createElementNS && !(\"classList\" in document.createElementNS(\"http://www.w3.org/2000/svg\",\"g\"))) {\n\n        (function (view) {\n\n            \"use strict\";\n\n            if (!('Element' in view)) return;\n\n            var\n            classListProp = \"classList\"\n            , protoProp = \"prototype\"\n            , elemCtrProto = view.Element[protoProp]\n            , objCtr = Object\n            , strTrim = String[protoProp].trim || function () {\n                return this.replace(/^\\s+|\\s+$/g, \"\");\n            }\n            , arrIndexOf = Array[protoProp].indexOf || function (item) {\n                var\n                i = 0\n                , len = this.length\n                ;\n                for (; i < len; i++) {\n                    if (i in this && this[i] === item) {\n                        return i;\n                    }\n                }\n                return -1;\n            }\n            // Vendors: please allow content code to instantiate DOMExceptions\n            , DOMEx = function (type, message) {\n                this.name = type;\n                this.code = DOMException[type];\n                this.message = message;\n            }\n            , checkTokenAndGetIndex = function (classList, token) {\n                if (token === \"\") {\n                    throw new DOMEx(\n                        \"SYNTAX_ERR\"\n                        , \"An invalid or illegal string was specified\"\n                    );\n                }\n                if (/\\s/.test(token)) {\n                    throw new DOMEx(\n                        \"INVALID_CHARACTER_ERR\"\n                        , \"String contains an invalid character\"\n                    );\n                }\n                return arrIndexOf.call(classList, token);\n            }\n            , ClassList = function (elem) {\n                var\n                trimmedClasses = strTrim.call(elem.getAttribute(\"class\") || \"\")\n                , classes = trimmedClasses ? trimmedClasses.split(/\\s+/) : []\n                , i = 0\n                , len = classes.length\n                ;\n                for (; i < len; i++) {\n                    this.push(classes[i]);\n                }\n                this._updateClassName = function () {\n                    elem.setAttribute(\"class\", this.toString());\n                };\n            }\n            , classListProto = ClassList[protoProp] = []\n            , classListGetter = function () {\n                return new ClassList(this);\n            }\n            ;\n            // Most DOMException implementations don't allow calling DOMException's toString()\n            // on non-DOMExceptions. Error's toString() is sufficient here.\n            DOMEx[protoProp] = Error[protoProp];\n            classListProto.item = function (i) {\n                return this[i] || null;\n            };\n            classListProto.contains = function (token) {\n                token += \"\";\n                return checkTokenAndGetIndex(this, token) !== -1;\n            };\n            classListProto.add = function () {\n                var\n                tokens = arguments\n                , i = 0\n                , l = tokens.length\n                , token\n                , updated = false\n                ;\n                do {\n                    token = tokens[i] + \"\";\n                    if (checkTokenAndGetIndex(this, token) === -1) {\n                        this.push(token);\n                        updated = true;\n                    }\n                }\n                while (++i < l);\n\n                if (updated) {\n                    this._updateClassName();\n                }\n            };\n            classListProto.remove = function () {\n                var\n                tokens = arguments\n                , i = 0\n                , l = tokens.length\n                , token\n                , updated = false\n                , index\n                ;\n                do {\n                    token = tokens[i] + \"\";\n                    index = checkTokenAndGetIndex(this, token);\n                    while (index !== -1) {\n                        this.splice(index, 1);\n                        updated = true;\n                        index = checkTokenAndGetIndex(this, token);\n                    }\n                }\n                while (++i < l);\n\n                if (updated) {\n                    this._updateClassName();\n                }\n            };\n            classListProto.toggle = function (token, force) {\n                token += \"\";\n\n                var\n                result = this.contains(token)\n                , method = result ?\n                    force !== true && \"remove\"\n                    :\n                    force !== false && \"add\"\n                ;\n\n                if (method) {\n                    this[method](token);\n                }\n\n                if (force === true || force === false) {\n                    return force;\n                } else {\n                    return !result;\n                }\n            };\n            classListProto.toString = function () {\n                return this.join(\" \");\n            };\n\n            if (objCtr.defineProperty) {\n                var classListPropDesc = {\n                    get: classListGetter\n                    , enumerable: true\n                    , configurable: true\n                };\n                try {\n                    objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n                } catch (ex) { // IE 8 doesn't support enumerable:true\n                    if (ex.number === -0x7FF5EC54) {\n                        classListPropDesc.enumerable = false;\n                        objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n                    }\n                }\n            } else if (objCtr[protoProp].__defineGetter__) {\n                elemCtrProto.__defineGetter__(classListProp, classListGetter);\n            }\n\n        }(self));\n\n    } else {\n        // There is full or partial native classList support, so just check if we need\n        // to normalize the add/remove and toggle APIs.\n\n        (function () {\n            \"use strict\";\n\n            var testElement = document.createElement(\"_\");\n\n            testElement.classList.add(\"c1\", \"c2\");\n\n            // Polyfill for IE 10/11 and Firefox <26, where classList.add and\n            // classList.remove exist but support only one argument at a time.\n            if (!testElement.classList.contains(\"c2\")) {\n                var createMethod = function(method) {\n                    var original = DOMTokenList.prototype[method];\n\n                    DOMTokenList.prototype[method] = function(token) {\n                        var i, len = arguments.length;\n\n                        for (i = 0; i < len; i++) {\n                            token = arguments[i];\n                            original.call(this, token);\n                        }\n                    };\n                };\n                createMethod('add');\n                createMethod('remove');\n            }\n\n            testElement.classList.toggle(\"c3\", false);\n\n            // Polyfill for IE 10 and Firefox <24, where classList.toggle does not\n            // support the second argument.\n            if (testElement.classList.contains(\"c3\")) {\n                var _toggle = DOMTokenList.prototype.toggle;\n\n                DOMTokenList.prototype.toggle = function(token, force) {\n                    if (1 in arguments && !this.contains(token) === !force) {\n                        return force;\n                    } else {\n                        return _toggle.call(this, token);\n                    }\n                };\n            }\n            testElement = null;\n        }());\n    }\n}\n\n\n\n \n/**\n * @module polyfill.classList\n * @see module:polyfill.classList\n\n */\n});","zip":"require(\"polyfill.classList\",function(t,e){\"document\"in self&&(\"classList\"in document.createElement(\"_\")&&(!document.createElementNS||\"classList\"in document.createElementNS(\"http://www.w3.org/2000/svg\",\"g\"))?!function(){\"use strict\";var t=document.createElement(\"_\");if(t.classList.add(\"c1\",\"c2\"),!t.classList.contains(\"c2\")){var e=function(t){var e=DOMTokenList.prototype[t];DOMTokenList.prototype[t]=function(t){var n,i=arguments.length;for(n=0;i>n;n++)t=arguments[n],e.call(this,t)}};e(\"add\"),e(\"remove\")}if(t.classList.toggle(\"c3\",!1),t.classList.contains(\"c3\")){var n=DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle=function(t,e){return 1 in arguments&&!this.contains(t)==!e?e:n.call(this,t)}}t=null}():!function(t){\"use strict\";if(\"Element\"in t){var e=\"classList\",n=\"prototype\",i=t.Element[n],s=Object,r=String[n].trim||function(){return this.replace(/^\\s+|\\s+$/g,\"\")},o=Array[n].indexOf||function(t){for(var e=0,n=this.length;n>e;e++)if(e in this&&this[e]===t)return e;return-1},c=function(t,e){this.name=t,this.code=DOMException[t],this.message=e},a=function(t,e){if(\"\"===e)throw new c(\"SYNTAX_ERR\",\"An invalid or illegal string was specified\");if(/\\s/.test(e))throw new c(\"INVALID_CHARACTER_ERR\",\"String contains an invalid character\");return o.call(t,e)},l=function(t){for(var e=r.call(t.getAttribute(\"class\")||\"\"),n=e?e.split(/\\s+/):[],i=0,s=n.length;s>i;i++)this.push(n[i]);this._updateClassName=function(){t.setAttribute(\"class\",this.toString())}},u=l[n]=[],f=function(){return new l(this)};if(c[n]=Error[n],u.item=function(t){return this[t]||null},u.contains=function(t){return t+=\"\",-1!==a(this,t)},u.add=function(){var t,e=arguments,n=0,i=e.length,s=!1;do t=e[n]+\"\",-1===a(this,t)&&(this.push(t),s=!0);while(++n<i);s&&this._updateClassName()},u.remove=function(){var t,e,n=arguments,i=0,s=n.length,r=!1;do for(t=n[i]+\"\",e=a(this,t);-1!==e;)this.splice(e,1),r=!0,e=a(this,t);while(++i<s);r&&this._updateClassName()},u.toggle=function(t,e){t+=\"\";var n=this.contains(t),i=n?e!==!0&&\"remove\":e!==!1&&\"add\";return i&&this[i](t),e===!0||e===!1?e:!n},u.toString=function(){return this.join(\" \")},s.defineProperty){var h={get:f,enumerable:!0,configurable:!0};try{s.defineProperty(i,e,h)}catch(d){-2146823252===d.number&&(h.enumerable=!1,s.defineProperty(i,e,h))}}else s[n].__defineGetter__&&i.__defineGetter__(e,f)}}(self))});\n//# sourceMappingURL=polyfill.classList.js.map","map":{"version":3,"file":"polyfill.classList.js.map","sources":["polyfill.classList.js"],"sourcesContent":["/** @module polyfill.classList */require( 'polyfill.classList', function(exports, module) {  /*\n * classList.js: Cross-browser full element.classList implementation.\n * 1.1.20150312\n *\n * By Eli Grey, http://eligrey.com\n * License: Dedicated to the public domain.\n *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md\n */\n\n/*global self, document, DOMException */\n\n/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */\n\nif (\"document\" in self) {\n\n    // Full polyfill for browsers with no classList support\n    // Including IE < Edge missing SVGElement.classList\n    if (!(\"classList\" in document.createElement(\"_\"))\n        || document.createElementNS && !(\"classList\" in document.createElementNS(\"http://www.w3.org/2000/svg\",\"g\"))) {\n\n        (function (view) {\n\n            \"use strict\";\n\n            if (!('Element' in view)) return;\n\n            var\n            classListProp = \"classList\"\n            , protoProp = \"prototype\"\n            , elemCtrProto = view.Element[protoProp]\n            , objCtr = Object\n            , strTrim = String[protoProp].trim || function () {\n                return this.replace(/^\\s+|\\s+$/g, \"\");\n            }\n            , arrIndexOf = Array[protoProp].indexOf || function (item) {\n                var\n                i = 0\n                , len = this.length\n                ;\n                for (; i < len; i++) {\n                    if (i in this && this[i] === item) {\n                        return i;\n                    }\n                }\n                return -1;\n            }\n            // Vendors: please allow content code to instantiate DOMExceptions\n            , DOMEx = function (type, message) {\n                this.name = type;\n                this.code = DOMException[type];\n                this.message = message;\n            }\n            , checkTokenAndGetIndex = function (classList, token) {\n                if (token === \"\") {\n                    throw new DOMEx(\n                        \"SYNTAX_ERR\"\n                        , \"An invalid or illegal string was specified\"\n                    );\n                }\n                if (/\\s/.test(token)) {\n                    throw new DOMEx(\n                        \"INVALID_CHARACTER_ERR\"\n                        , \"String contains an invalid character\"\n                    );\n                }\n                return arrIndexOf.call(classList, token);\n            }\n            , ClassList = function (elem) {\n                var\n                trimmedClasses = strTrim.call(elem.getAttribute(\"class\") || \"\")\n                , classes = trimmedClasses ? trimmedClasses.split(/\\s+/) : []\n                , i = 0\n                , len = classes.length\n                ;\n                for (; i < len; i++) {\n                    this.push(classes[i]);\n                }\n                this._updateClassName = function () {\n                    elem.setAttribute(\"class\", this.toString());\n                };\n            }\n            , classListProto = ClassList[protoProp] = []\n            , classListGetter = function () {\n                return new ClassList(this);\n            }\n            ;\n            // Most DOMException implementations don't allow calling DOMException's toString()\n            // on non-DOMExceptions. Error's toString() is sufficient here.\n            DOMEx[protoProp] = Error[protoProp];\n            classListProto.item = function (i) {\n                return this[i] || null;\n            };\n            classListProto.contains = function (token) {\n                token += \"\";\n                return checkTokenAndGetIndex(this, token) !== -1;\n            };\n            classListProto.add = function () {\n                var\n                tokens = arguments\n                , i = 0\n                , l = tokens.length\n                , token\n                , updated = false\n                ;\n                do {\n                    token = tokens[i] + \"\";\n                    if (checkTokenAndGetIndex(this, token) === -1) {\n                        this.push(token);\n                        updated = true;\n                    }\n                }\n                while (++i < l);\n\n                if (updated) {\n                    this._updateClassName();\n                }\n            };\n            classListProto.remove = function () {\n                var\n                tokens = arguments\n                , i = 0\n                , l = tokens.length\n                , token\n                , updated = false\n                , index\n                ;\n                do {\n                    token = tokens[i] + \"\";\n                    index = checkTokenAndGetIndex(this, token);\n                    while (index !== -1) {\n                        this.splice(index, 1);\n                        updated = true;\n                        index = checkTokenAndGetIndex(this, token);\n                    }\n                }\n                while (++i < l);\n\n                if (updated) {\n                    this._updateClassName();\n                }\n            };\n            classListProto.toggle = function (token, force) {\n                token += \"\";\n\n                var\n                result = this.contains(token)\n                , method = result ?\n                    force !== true && \"remove\"\n                    :\n                    force !== false && \"add\"\n                ;\n\n                if (method) {\n                    this[method](token);\n                }\n\n                if (force === true || force === false) {\n                    return force;\n                } else {\n                    return !result;\n                }\n            };\n            classListProto.toString = function () {\n                return this.join(\" \");\n            };\n\n            if (objCtr.defineProperty) {\n                var classListPropDesc = {\n                    get: classListGetter\n                    , enumerable: true\n                    , configurable: true\n                };\n                try {\n                    objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n                } catch (ex) { // IE 8 doesn't support enumerable:true\n                    if (ex.number === -0x7FF5EC54) {\n                        classListPropDesc.enumerable = false;\n                        objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n                    }\n                }\n            } else if (objCtr[protoProp].__defineGetter__) {\n                elemCtrProto.__defineGetter__(classListProp, classListGetter);\n            }\n\n        }(self));\n\n    } else {\n        // There is full or partial native classList support, so just check if we need\n        // to normalize the add/remove and toggle APIs.\n\n        (function () {\n            \"use strict\";\n\n            var testElement = document.createElement(\"_\");\n\n            testElement.classList.add(\"c1\", \"c2\");\n\n            // Polyfill for IE 10/11 and Firefox <26, where classList.add and\n            // classList.remove exist but support only one argument at a time.\n            if (!testElement.classList.contains(\"c2\")) {\n                var createMethod = function(method) {\n                    var original = DOMTokenList.prototype[method];\n\n                    DOMTokenList.prototype[method] = function(token) {\n                        var i, len = arguments.length;\n\n                        for (i = 0; i < len; i++) {\n                            token = arguments[i];\n                            original.call(this, token);\n                        }\n                    };\n                };\n                createMethod('add');\n                createMethod('remove');\n            }\n\n            testElement.classList.toggle(\"c3\", false);\n\n            // Polyfill for IE 10 and Firefox <24, where classList.toggle does not\n            // support the second argument.\n            if (testElement.classList.contains(\"c3\")) {\n                var _toggle = DOMTokenList.prototype.toggle;\n\n                DOMTokenList.prototype.toggle = function(token, force) {\n                    if (1 in arguments && !this.contains(token) === !force) {\n                        return force;\n                    } else {\n                        return _toggle.call(this, token);\n                    }\n                };\n            }\n            testElement = null;\n        }());\n    }\n}\n\n\n\n \n});"],"names":["require","exports","module","self","document","createElement","createElementNS","testElement","classList","add","contains","createMethod","method","original","DOMTokenList","prototype","token","i","len","arguments","length","call","this","toggle","_toggle","force","view","classListProp","protoProp","elemCtrProto","Element","objCtr","Object","strTrim","String","trim","replace","arrIndexOf","Array","indexOf","item","DOMEx","type","message","name","code","DOMException","checkTokenAndGetIndex","test","ClassList","elem","trimmedClasses","getAttribute","classes","split","push","_updateClassName","setAttribute","toString","classListProto","classListGetter","Error","tokens","l","updated","remove","index","splice","result","join","defineProperty","classListPropDesc","get","enumerable","configurable","ex","number","__defineGetter__"],"mappings":"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"},"dependencies":["mod/polyfill.classList"]}