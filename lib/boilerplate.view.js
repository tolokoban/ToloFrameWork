"use strict";

var DIGITS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
var TAG_NAME = /^[A-Z]+$/;
var CLS_NAME = /^[a-z]+\.[a-z0-9.-]+$/;

exports.generateCodeFrom = function( def, codeBehind ) {
  var code = {
    _counter: -1,
    id: function(prefix) {
      if( typeof prefix === 'undefined' ) prefix = "";
      this._counter++;
      var counter = this._counter;
      if( counter < DIGITS.length) return prefix + DIGITS.charAt(counter);
      return prefix + "_" + counter + "_";
    },
    behind: codeBehind,
    requires: {},
    functions: {},
    vars: {},
    that: false,
    pm: false,
    aliases: {},
    section: {
      comments: [],
      attribs: {
        define: [],
        init: []
      },
      elements: [],
      events: [],
      links: []
    }
  };

  // Define attributes.
  buildViewAttribs( def, code );
  // Transform `def` to make it look like an HTML tag.
  def[0] = def[1];
  def[1] = def[2];
  delete def[2];
  buildTag( def, code );

  // Generate full code.
  var key, val;
  if( code.pm ) {
    code.requires.PM = "require('tfw.binding.property-manager')";
  }
  var out = codeBehind + "\n\n//===============================\n"
        + "// XJS:View autogenerated code.\n";
  out += "/**\n * " + code.section.comments.join("\n * ") + "\n */\n";
  out += "module.exports = function() {\n";
  if( code.that ) out += "  var that = this;\n";
  if( hasAttribs( code.requires ) ) {
    out += "  //---------------\n";
    out += "  // Dependencies.\n";
    for( key in code.requires ) {
      val = code.requires[key];
      out += "  var " + key + " = " + val + ";\n";
    }
  }
  if( hasAttribs( code.functions ) ) {
    out += "  //------------\n";
    out += "  // Functions.\n";
    for( key in code.functions ) {
      val = code.functions[key];
      out += "  function " + key + val + ";\n";
    }
  }
  if( hasAttribs( code.vars ) ) {
    out += "  //-------------------\n";
    out += "  // Global variables.\n";
    for( key in code.vars ) {
      val = code.vars[key];
      out += "  var " + key + " = " + val + ";\n";
    }
  }
  out += "  var ViewClass = function( args ) {\n";
  if( code.pm ) out += "    var pm = PM(this);\n";
  out += generate( code.section.attribs.define, "Create attributes", "    " );
  out += generate( code.section.elements, "Create elements", "    " );
  out += generate( code.section.events, "Events", "    " );
  out += generate( code.section.links, "Links", "    " );
  out += generate( code.section.attribs.init, "Initialize attributes", "    " );
  out += "  };\n";
  out += "  return ViewClass;\n";
  out += "}();\n";
  return out;
};

/**
 * Return the code from an array and an identation.
 * The code is preceded by a comment.
 */
function generate( arr, comment, indent ) {
  if( typeof indent === 'undefined' ) indent = "  ";
  if( arr.length === 0 ) return "";
  var len = comment.length + 3;
  var out = indent + "//";
  while( len --> 0 ) out += "-";
  out += "\n";
  out += indent + "// " + comment + ".\n";
  arr.forEach(function (line) {
    out += indent + line + "\n";
  });
  return out;
}

/**
 * @example
 * view.attribs: {
 *   flat: true
 *   type: {[default, primary, secondary]}
 *   count: {integer}
 * }
 */
function buildViewAttribs( def, code ) {
  var attribs = def["view.attribs"];
  if( typeof attribs !== 'object' ) return;
  var attName, attValue;
  for( attName in attribs ) {
    attValue = attribs[attName];
    if( isSpecial( attValue ) ) buildViewAttribsSpecial( attName, attValue, code );
    else buildViewAttribsInit( attName, attValue, code );
  }
}

/**
 * Attribute with casting.
 * @example
 * type: {[default, primary, secondary]}
 * count: {integer}
 */
function buildViewAttribsSpecial( attName, attValue, code ) {
  var type = attValue[0];
  var init = attValue[1];
  var requireConverter = false;

  buildViewAttribsInit( attName, init, code );
  if( Array.isArray( type ) ) {
    // Enumerate.
    requireConverter = true;
    code.vars.enumCast = "Converters.get('enum')";
    code.pm = true;
    code.section.attribs.define.push(
      "pm.create(" + JSON.stringify(attName)
        + ", { cast: enumCast(" + JSON.stringify(type) + ") });");
  }
  else {
    switch( type ) {
    case 'action':
      code.pm = true;
      code.section.attribs.define.push(
        "pm.createAction(" + JSON.stringify(attName) + ")");
      break;
    case 'boolean':
    case 'integer':
    case 'float':
    case 'string':
      requireConverter = true;
      code.vars[type + 'Cast'] = "Converters.get('" + type + "')";
      code.pm = true;
      code.section.attribs.define.push(
        "pm.create(" + JSON.stringify(attName)
          + ", { cast: " + type + "Cast() }");
      break;
    default:
      throw "Unknown type \"" + type + "\" for attribute \"" + attName + "\"!";
    }
  }

  if( requireConverter ) {
    code.requires.Converters = "require('tfw.binding.converters');";
  }
}

/**
 * Initialize attribute with a value. Priority to the value set in the
 * contructor args.
 */
function buildViewAttribsInit( attName, attValue, code ) {
  if( attValue === undefined ) {
    code.section.attribs.init.push("this." + attName + " = args["
                                   + JSON.stringify(attName) + "];");
  } else {
    code.functions["defVal"] = "(args, attName, attValue) "
      + "{ return args[attName] === undefined ? attValue : args[attName]; }";
    code.section.attribs.init.push("this." + attName + " = defVal(args, "
                                   + JSON.stringify(attName) + ", " + JSON.stringify(attValue)
                                   + ");");
  }
}

/**
 *
 */
function buildTag( def, code ) {

}


/**
 * Determine if an object is special or not.
 * An object is special as soon as it own the "0" attribute.
 */
function isSpecial( obj ) {
  var type = typeof obj;
  if( type === 'string' || type !== 'object' || Array.isArray(obj) ) return false;
  if( !obj ) return false;
  return typeof obj[0] !== undefined;
}

/**
 * Check if an object has attributes or not.
 * It is empty if it has no attribute.
 */
function isEmptyObj( obj ) {
  for( var k in obj ) return false;
  return true;
}

/**
 * Check if an object as at least on attribute.
 */
function hasAttribs( obj ) {
  for( var k in obj ) return true;
  return false;
}


function capitalizedCamelCase( name ) {
  return name.split('.').map(function(word) {
    return word.split('-').map(capitalize).join("");
  }).join("");
}

function capitalize( name ) {
  return name.charAt(0).toUpperCase() + name.substr(1).toLowerCase();
}
