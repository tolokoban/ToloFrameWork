{
  "name": "readline-sync",
  "description": "Synchronous Readline",
  "version": "0.4.8",
  "homepage": "https://github.com/anseki/readline-sync",
  "author": {
    "name": "anseki"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/anseki/readline-sync.git"
  },
  "bugs": {
    "url": "https://github.com/anseki/readline-sync/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/anseki/readline-sync/blob/master/LICENSE-MIT"
    }
  ],
  "main": "./lib/readline-sync.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "keywords": [
    "readline",
    "synchronous",
    "prompt",
    "question",
    "wait",
    "block"
  ],
  "readme": "# readlineSync\n\nSynchronous [Readline](http://nodejs.org/api/readline.html) for interactively running.  \nThe interface is used with `process.stdin` and `process.stdout` in order to accept user input.\n\n## Example\n\n```js\nvar readlineSync = require('readline-sync');\nvar answer = readlineSync.question('What is your favorite food? :');\nconsole.log('Oh, so your favorite food is ' + answer);\n```\n\n## Installation\n\n```\nnpm install readline-sync\n```\n\n## Usage\n\n### setPrompt\n\n```js\ncurrentValue = readlineSync.setPrompt([prompt])\n```\n\nSets the prompt, for example when you run `node` on the command line, you see `> `, which is node's prompt.  \n`prompt` may be string, or may not be (e.g. number, Date, Object, etc.). This is converted to string (i.e. `toString` method is called) before it is displayed every time.  \nFor example: `[foo-directory]#` like a bash\n\n```js\n// Object that has toString method.\nreadlineSync.setPrompt({toString: function() {\n  return '[' + require('path').basename(process.cwd()) + ']# ';\n}})\n```\n\n### prompt\n\n```js\nline = readlineSync.prompt([options])\n```\n\nReadies readline for input from the user, putting the current `setPrompt` options on a new line, giving the user a new spot to write.  \nIf `{noEchoBack: true}` is specified to `options`, echo back is avoided. It is used to hide the secret text (e.g. password) which is typed by user on screen.\n\n### question\n\n```js\nline = readlineSync.question([query[, options]])\n```\n\nDisplays the `query` to the user, and then returns the user's response after it has been typed.  \n`query` may be string, or may not be (e.g. number, Date, Object, etc.). This is converted to string (i.e. `toString` method is called) before it is displayed.  \nIf `{noEchoBack: true}` is specified to `options`, echo back is avoided. It is used to hide the secret text (e.g. password) which is typed by user on screen.\n\n### setEncoding\n\n```js\ncurrentValue = readlineSync.setEncoding([encoding])\n```\n\nSet the encoding method of input (user's response) and output (`prompt` and `question`). Defaults to 'utf8'.\n\n### setPrint\n\n```js\nreadlineSync.setPrint([funcPrint])\n```\n\nThe specified Function is called when any output (`prompt` and `question`). Defaults to `undefined`.  \nThe Function is given two arguments the output text and `encoding`.\n\n![sample](cl_01.png)\n\nFor example, this is used to pass plain texts to Logger, when texts are colored.\n\n```js\nvar readlineSync = require('readline-sync'),\n  user, pw, cmd;\nrequire('colors');\n\nreadlineSync.setPrint(function(display, encoding) {\n  logger.log(display.stripColors); // remove control characters\n});\n\nconsole.log('Your account required.'.grey);\nuser = readlineSync.question('USER NAME'.white.inverse + ': ');\npw = readlineSync.question('PASSWORD'.white.inverse + ': ', {noEchoBack: true});\n// Authorization ...\nconsole.log(('Welcome, ' + user + '!').green.bold);\n\nreadlineSync.setPrompt('> '.bold.red);\ncmd = readlineSync.prompt();\n```\n\n## With Task Runner\n\nIf you want to control the flow of task runner (e.g. [Grunt](http://gruntjs.com/)), call readlineSync in a task callback that is called by task runner. Then the flow of tasks is paused and it is controlled by user.\n\nExample: by using [grunt-task-helper](https://www.npmjs.org/package/grunt-task-helper)\n\n```shell\n$ grunt\nRunning \"fileCopy\" task\nFiles already exist:\n  file-a.png\n  file-b.js\nOverwrite? (y/n) :y\nfile-a.png copied.\nfile-b.js copied.\nDone.\n```\n\n`Gruntfile.js`\n\n```js\ngrunt.initConfig({\n  taskHelper: {\n    fileCopy: {\n      options: {\n        handlerByTask: function() {\n          // Abort the task if user don't want.\n          return readlineSync.question('Overwrite? (y/n) :')\n            .toLowerCase() === 'y';\n          // Or process.exit()\n        },\n        filesArray: []\n      },\n      ...\n    }\n  },\n  copy: {\n    fileCopy: {\n      files: '<%= taskHelper.fileCopy.options.filesArray %>'\n    }\n  }\n});\n```\n\n## Note\n\n### Platforms\n\nThe your Node and OS may not support interactively reading from stdin. The stdin interfaces are different by platforms.  \nIf in those platforms, an error is thrown.\n\n```js\ntry {\n  answer = readlineSync.question('What is your favorite food? :');\n} catch (e) {\n  console.error(e);\n  process.exit(1);\n}\n```\n\n### Reading by shell\n\nreadlineSync tries reading from stdin by shell if it is needed. And, it use \"piping via files\" for synchronous running.  \nAs everyone knows, \"piping via files\" is no good. It blocks event loop and a process. It may make your script be slow.\n\nWhy did I choose it? :\n\n+ The best solution is [child_process.execSync](https://github.com/joyent/node/blob/master/doc/api/child_process.markdown#child_processexecsynccommand-options) in core modules of Node. But it is not supported by current version.\n+ The good modules (native addon) for synchronous execution exist. But node-gyp can't compile those in some platforms or Node versions.\n+ I think that the security is important more than the speed. Some modules have problem about security. (Those don't protect data.) I think that the speed is not needed usually, because readlineSync is used while user types keys.\n\nSomeday, I may rewrite readlineSync to use child_process.execSync, or safety module.\n\n## Release History\n * 2014-09-12\t\t\tv0.4.8\t\t\tfixed #9: Error of `stty` in read.sh.\n * 2014-07-13\t\t\tv0.4.3\t\t\tfixed #6: Crypto input data.\n * 2014-07-12\t\t\tv0.4.2\t\t\t`setPrompt()` and `setEncoding()` return current value.\n * 2014-07-12\t\t\tv0.4.1\t\t\t`setPrompt()` and `question()` accept the value which is not string too (e.g. number, Date, Object, etc.).\n * 2014-07-12\t\t\tv0.4.0\t\t\tAdd `options.noEchoBack`.\n * 2014-07-12\t\t\tv0.3.0\t\t\tAdd `setPrint()`.\n * 2014-06-27\t\t\tv0.2.3\t\t\tAdd alternative reading via shell on the environment which don't support interactively reading.\n * 2013-12-18\t\t\tv0.2.2\t\t\tError handle for the environment which don't support interactively reading from stdin.\n * 2013-08-30\t\t\tv0.2.0\t\t\tRewrite exporting methods.\n * 2013-08-29\t\t\tv0.1.0\t\t\tInitial release.\n",
  "readmeFilename": "README.md",
  "_id": "readline-sync@0.4.8",
  "dist": {
    "shasum": "f20f97716ec0f2318ced3a401c817330a50d2ab9"
  },
  "_from": "readline-sync@",
  "_resolved": "https://registry.npmjs.org/readline-sync/-/readline-sync-0.4.8.tgz"
}
